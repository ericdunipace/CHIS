name: Run DAC R Code with renv and testthat

on:
  push:
  pull_request:
    branches: [main, master, dac]

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        toolchain:
          - {compiler: gcc, version: 13}

    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      RENV_CONFIG_REPOS_OVERRIDE: https://packagemanager.posit.co/cran/latest
      RENV_CONFIG_INSTALL_STAGED: false
      RENV_CONFIG_CACHE_SYMLINKS: FALSE
      RENV_ROBOCOPY_SAFETY: false
      RENV_CONFIG_VERBOSE: TRUE

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up R
      uses: r-lib/actions/setup-r@v2
      with:
        r-version: '4.2.3'  # version on DAC website
        
    - name: Install system dependencies (mac)
      if: runner.os == 'macOS'
      run: |
        brew install gcc udunits gettext jq gdal udunits
        if [ -d /opt/homebrew ]; then BREW_PREFIX=/opt/homebrew; else BREW_PREFIX=/usr/local; fi
        GCCVER=$(brew info gcc --json | jq -r '.[0].installed[0].version | split(".")[0]')
        sudo ln -sf $BREW_PREFIX/bin/gfortran /usr/local/bin/gfortran
        sudo tee -a $(R RHOME)/etc/Makeconf <<EOF
        FC=$BREW_PREFIX/bin/gfortran
        F77=$BREW_PREFIX/bin/gfortran
        FLIBS=-L$BREW_PREFIX/lib/gcc/$GCCVER -lgfortran
        EOF
    
    - name: Set UDUNITS2 env vars (macOS only)
      if: runner.os == 'macOS'
      run: |
        # Symlink .dylib as .so if not already present
        if [ -f /opt/homebrew/lib/libudunits2.dylib ]; then
          ln -sf /opt/homebrew/lib/libudunits2.dylib /opt/homebrew/lib/libudunits2.so
        fi
        if [ -f /usr/local/lib/libudunits2.dylib ]; then
          ln -sf /usr/local/lib/libudunits2.dylib /usr/local/lib/libudunits2.so
        fi
        echo "UDUNITS2_INCLUDE=/opt/homebrew/include" >> $GITHUB_ENV
        echo "UDUNITS2_LIBS='-L/opt/homebrew/lib -ludunits2'" >> $GITHUB_ENV
        echo "PKG_CONFIG_PATH=/opt/homebrew/lib/pkgconfig" >> $GITHUB_ENV
        echo "UDUNITS2_XML_PATH=/opt/homebrew/share/udunits/udunits2.xml" >> $GITHUB_ENV
        echo "LD_LIBRARY_PATH=/opt/homebrew/lib" >> $GITHUB_ENV
        # Repeat for Intel prefix (for universal workflows)
        echo "UDUNITS2_INCLUDE=/usr/local/include" >> $GITHUB_ENV
        echo "UDUNITS2_LIBS='-L/usr/local/lib -ludunits2'" >> $GITHUB_ENV
        echo "PKG_CONFIG_PATH=/usr/local/lib/pkgconfig" >> $GITHUB_ENV
        echo "UDUNITS2_XML_PATH=/usr/local/share/udunits/udunits2.xml" >> $GITHUB_ENV
        echo "LD_LIBRARY_PATH=/usr/local/lib" >> $GITHUB_ENV
        
    - name: Debug udunits presence
      if: runner.os == 'macOS'
      run: |
        ls -lh /opt/homebrew/lib/libudunits2*
        ls -lh /opt/homebrew/include/udunits2.h || true
        ls -lh /opt/homebrew/lib/pkgconfig/udunits2.pc || true
        ls -lh /usr/local/lib/libudunits2* || true
        ls -lh /usr/local/include/udunits2.h || true
        ls -lh /usr/local/lib/pkgconfig/udunits2.pc || true
      
    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libcurl4-openssl-dev libssl-dev libxml2-dev \
          libharfbuzz-dev libfribidi-dev libfreetype6-dev \
          libpng-dev libtiff5-dev libjpeg-dev \
          libudunits2-dev libgdal-dev gdal-bin \
          libgeos-dev libproj-dev libgettextpo-dev gettext \
          gfortran
          
    - name: Install gfortran (Windows)
      if: runner.os == 'Windows'
      run: |
        choco install -y mingw
        echo "C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          
    # Verify installation
    - name: Show gfortran version
      run: |
        gfortran --version
      shell: bash
      
    - name: Install remotes
      shell: Rscript {0}
      run: |
        install.packages("remotes")
      
    - name: Install units and fs on macOS
      if: runner.os == 'macOS'
      shell: Rscript {0}
      run: |
        remotes::install_version("units", version = "0.8-1", type = 'source', configure.args = c(units = '--with-udunits2-lib=/opt/homebrew/lib --with-udunits2-include=/opt/homebrew/include'))
        remotes::install_version("fs", version = "1.6.1", type = 'source')
        
    - name: Install renv and restore environment
      shell: Rscript {0}
      run: |
        remotes::install_version("renv", version = "1.1.4")
        remove.packages("remotes")
        tryCatch({
          renv::restore(prompt = FALSE, rebuild = TRUE)
        }, error = function(e) {
          message("RENV RESTORE ERROR: ", conditionMessage(e))
          renv::status()
          quit(status = 1)
        })

    - name: Run testthat tests
      run: |
        Rscript -e 'install.packages("testthat", repos = "https://cloud.r-project.org")'
        Rscript tests/testthat.R
